# Factorial

# This code has been generated by a compiler that resets the
# register/temporary number to zero at the beginning of IR code generation
# for each statement.

# #include <stdio.h>
# #include <stdlib.h>
#
# /* Built-in syscalls */
# void syscall_print_int(int integer);
# void syscall_print_string(char *string);
# int syscall_read_int(void);
# void syscall_read_string(char *buffer, int length);
# void syscall_exit(void);
#
# char *strcpy(char *dest, char *src);
# int factorial(int n);
#
# int main(void) {
#   char prompt[80];
#   int n, f;
#
#   strcpy(prompt, "Factorial of ");
#   syscall_print_string(prompt);
#
#   n = syscall_read_int();
#
#   strcpy(prompt, " equals ");
#   syscall_print_string(prompt);
#
#   f = factorial(n);
#
#   syscall_print_int(f);
#
#   strcpy(prompt, "\n");
#   syscall_print_string(prompt);
#
#   return 0;
# }
#
# char *strcpy(char *dest, char *src) {
#   char *initial_dest;
#
#   initial_dest = dest;
#   do {
#     *dest++ = *src;
#   } while(*src++);
#   return initial_dest;
# }
#
# int factorial(int n) {
#   if(n <= 1)
#     return 1;
#   else
#     return n*factorial(n-1);
# }
#
# /* The functions below allow execution in a standard Posix environment */
#
# void syscall_print_int(int integer) {
#   printf("%d", integer);
# }
#
# void syscall_print_string(char *string) {
#   while(*string) {
#     putchar(*string++);
#   }
# }
#
# int syscall_read_int(void) {
#   int i;
#
#   scanf("%d", &i);
#
#   return i;
# }
#
# void syscall_read_string(char *buffer, int length) {
#   fgets(buffer, length, stdin);
# }
#
# void syscall_exit(void) {
#   exit(0);
# }

# Literal Strings:
#   _StringLabel_1	"Factorial of "
#   _StringLabel_2	" equals "
#   _StringLabel_3	"\n"

# int main(void) {
(procBegin, main)

#   strcpy(prompt, "Factorial of ");
(addressOf, $r0, prompt)
(parameter, 0, $r0)
(addressOf, $r1, _StringLabel_1)
(parameter, 1, $r1)
(call, _Global_strcpy)

#   syscall_print_string(prompt);
(addressOf, $r0, prompt)
(parameter, 0, $r0)
(syscall, print_string)

#   n = syscall_read_int();
(addressOf, $r0, n)
(syscall, read_int)
(resultWord, $r1)
(storeWord, $r0, $r1)

#   strcpy(prompt, " equals ");
(addressOf, $r0, prompt)
(parameter, 0, $r0)
(addressOf, $r1, _StringLabel_2)
(parameter, 1, $r1)
(call, _Global_strcpy)

#   syscall_print_string(prompt);
(addressOf, $r0, prompt)
(parameter, 0, $r0)
(syscall, print_string)

#   f = factorial(n);
(addressOf, $r0, f)
(addressOf, $r1, n)
(loadWord, $r2, $r1)
(parameter, 0, $r2)
(call, _Global_factorial)
(resultWord, $r3)
(storeWord, $r0, $r3)

#   syscall_print_int(f);
(addressOf, $r0, f)
(loadWord, $r1, $r0)
(parameter, 0, $r1)
(syscall, print_int)

#   strcpy(prompt, "\n");
(addressOf, $r0, prompt)
(parameter, 0, $r0)
(addressOf, $r1, _StringLabel_3)
(parameter, 1, $r1)
(call, _Global_strcpy)

#   syscall_print_string(prompt);
(addressOf, $r0, prompt)
(parameter, 0, $r0)
(syscall, print_string)

#   return 0;
(constInt, $r0, 0)
(returnWord, $r0)
(goto, _GeneratedLabel_1)

# }
(label, _GeneratedLabel_1)
(procEnd, main)


# char *strcpy(char *dest, char *src) {
(procBegin, _Global_strcpy)

#   initial_dest = dest;
(addressOf, $r0, initial_dest)
(addressOf, $r1, dest)
(loadWord, $r2, $r1)
(storeWord, $r0, $r2)

#   do {
(label, _GeneratedLabel_2)

#     *dest++ = *src;
(addressOf, $r0, dest)
(addressOf, $r1, src)
(loadWord, $r2, $r1)
(loadSignedByte, $r3, $r2)
(loadWord, $r4, $r0)
(storeByte, $r4, $r3)
(addressOf, $r5, dest)
(loadWord, $r6, $r5)
(constInt, $r7, 1)
(addUnsignedWord, $r8, $r6, $r7)
(storeWord, $r5, $r8)

#   } while(*src++);
(addressOf, $r0, src)
(loadWord, $r1, $r0)
(loadSignedByte, $r2, $r1)
(addressOf, $r3, src)
(loadWord, $r4, $r3)
(constInt, $r5, 1)
(addUnsignedWord, $r6, $r4, $r5)
(storeWord, $r3, $r6)
(gotoIfTrue, $r2, _GeneratedLabel_2)

#   return initial_dest;
(addressOf, $r0, initial_dest)
(loadWord, $r1, $r0)
(returnWord, $r1)
(goto, _GeneratedLabel_3)

# }
(label, _GeneratedLabel_3)
(procEnd, _Global_strcpy)


# int factorial(int n) {
(procBegin, _Global_factorial)

#   if(n <= 1)
(addressOf, $r0, n)
(constInt, $r1, 1)
(loadWord, $r2, $r0)
(leSignedWord, $r3, $r2, $r1)
(gotoIfFalse, $r3, _GeneratedLabel_5)

#     return 1;
(constInt, $r0, 1)
(returnWord, $r0)
(goto, _GeneratedLabel_4)
	
#   else
(goto, _GeneratedLabel_6)
(label, _GeneratedLabel_5)

#     return n*factorial(n-1);
(addressOf, $r0, n)
(addressOf, $r1, n)
(constInt, $r2, 1)
(loadWord, $r3, $r1)
(subSignedWord, $r4, $r3, $r2)
(parameter, 0, $r4)
(call, _Global_factorial)
(resultWord, $r5)
(loadWord, $r6, $r0)
(multSignedWord, $r7, $r6, $r5)
(returnWord, $r7)
(goto, _GeneratedLabel_4)

(label, _GeneratedLabel_6)

# }
(label, _GeneratedLabel_4)
(procEnd, _Global_factorial)
