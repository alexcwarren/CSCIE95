Write a program named word-count.c in C (or
word-count.cpp in C++, but only with special permission), that uses
file I/O to read a text file whose name is specified on the command
line to the program.  The program will parse the input file into
words and will use a data structure of your choice to keep track of
the number of occurrences or each unique word that is found in the
input file.  Words will be delimited by white space which for our
purposes is defined to be any mix of spaces (' '), horizontal tabs
('\t'), or newlines ('\n') -- including multiple occurrences of
white space.  You are welcome to include a carriage-return ('\r') as
another white space character -- this facilitates code development
on Windows computers.  No other characters should be treated
specially (i.e., punctuation, hyphens, etc. should just be
considered as non-white-space characters that should be treated as
part of words).  Upon reaching end-of-file, the program will output
to stdout the number of: (1) lines in the input file, (2) number of
words in the input file, (3) a list of each unique word in the input
file along with the number of times that word appears in the file.
Your solution must compile and execute correctly on the nice
computers.  Remember to include a makefile to complete the build.

Depending   on  your    programming experience, you should  choose  an
appropriate data structure in which the words and word counts are
stored.  Although not worthy of full credit, using an array of fixed
size is acceptable.  Using a linked list -- perhaps sorted in
alphabetical order -- would be worthy of full credit even though the
performance of searching and inserting into a linked list may be
inefficient.  Do not spend your time implementing a more efficient
solution unless you are sure that you can complete this problem set
on time.
